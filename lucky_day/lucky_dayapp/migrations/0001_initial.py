# Generated by Django 2.0.2 on 2020-06-06 03:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import lucky_dayapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('provider_id', models.CharField(blank=True, max_length=150)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. ', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', lucky_dayapp.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='App_Settings',
            fields=[
                ('app_settings_id', models.AutoField(primary_key=True, serialize=False)),
                ('top_up_coin', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'app_settings',
            },
        ),
        migrations.CreateModel(
            name='LeaderBoard',
            fields=[
                ('leaderboard_id', models.AutoField(primary_key=True, serialize=False)),
                ('rank_no', models.IntegerField()),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='date')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'leaderboard',
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('offer_id', models.AutoField(primary_key=True, serialize=False)),
                ('offer_media', models.FileField(blank=True, upload_to=lucky_dayapp.models.get_upload_path_offer)),
                ('top_up_coin', models.IntegerField(blank=True, null=True)),
                ('cash', models.IntegerField(blank=True, null=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='offer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'offer',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='datetime')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='Paypal',
            fields=[
                ('paypal_primary_keys', models.AutoField(primary_key=True, serialize=False)),
                ('paypal_id', models.CharField(max_length=200)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'paypal',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('profile_media', models.FileField(blank=True, upload_to=lucky_dayapp.models.get_upload_path_profile)),
                ('coin', models.IntegerField(blank=True, null=True)),
                ('cash', models.IntegerField(blank=True, null=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='RedeemOffer',
            fields=[
                ('redeem_offer_id', models.AutoField(primary_key=True, serialize=False)),
                ('redeem_offer_media', models.FileField(blank=True, upload_to=lucky_dayapp.models.get_upload_path_redeem_offer)),
                ('title', models.CharField(max_length=500)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('feature', models.CharField(max_length=5000)),
                ('description', models.CharField(max_length=10000)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'redeem_offer',
            },
        ),
        migrations.CreateModel(
            name='ScratchCard',
            fields=[
                ('scratch_card_id', models.AutoField(primary_key=True, serialize=False)),
                ('offer_id', models.ForeignKey(db_column='offer_id', on_delete=django.db.models.deletion.CASCADE, to='lucky_dayapp.Offer')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'scratch_card',
            },
        ),
        migrations.CreateModel(
            name='WireTransfer',
            fields=[
                ('wire_transfer_id', models.AutoField(primary_key=True, serialize=False)),
                ('acc_no', models.CharField(max_length=18)),
                ('ifsc', models.CharField(max_length=18, null=True)),
                ('swift', models.CharField(max_length=18, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wire_transfer',
            },
        ),
    ]
